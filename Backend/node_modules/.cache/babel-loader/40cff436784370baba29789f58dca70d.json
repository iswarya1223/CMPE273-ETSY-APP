{"ast":null,"code":"import axios from 'axios';\nimport { setAlert } from './alert';\nimport { REGISTER_SUCCESS, REGISTER_FAIL, USER_LOADED, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT } from './types';\nimport setAuthToken from '../utils/setAuthToken';\nexport const loadUser = () => async dispatch => {\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n\n  try {\n    const res = await axios.get('/api/auth');\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n};\nexport const register = _ref => {\n  let {\n    uname,\n    email,\n    password,\n    location\n  } = _ref;\n  return async dispatch => {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const body = JSON.stringify({\n      uname,\n      email,\n      password,\n      location\n    });\n\n    try {\n      const res = await axios.post('/api/users', body, config);\n\n      if (res.data === 'failure') {\n        alert(\"user already existed\");\n      } else {\n        alert(\"user added\");\n      }\n\n      dispatch({\n        type: REGISTER_SUCCESS,\n        payload: res.data\n      });\n    } catch (err) {\n      const errors = err.response.data.errors;\n      console.log(errors);\n\n      if (errors) {\n        errors.forEach(err => dispatch(setAlert(err.msg)));\n      }\n\n      dispatch({\n        type: REGISTER_FAIL\n      });\n    }\n  };\n};\nexport const login = _ref2 => {\n  let {\n    email,\n    password\n  } = _ref2;\n  return async dispatch => {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const body = JSON.stringify({\n      email,\n      password\n    });\n    localStorage.setItem('email', email);\n\n    try {\n      const res = await axios.post('/api/users/login', body, config);\n\n      if (res.data !== \"failure\") {\n        dispatch({\n          type: LOGIN_SUCCESS,\n          payload: res.data\n        }); //dispatch(loadUser());\n      } else {\n        dispatch({\n          type: LOGIN_FAIL\n        });\n        alert(\"Invalid credentials!\");\n      }\n    } catch (err) {\n      const errors = err.response.data.errors;\n      console.log(errors);\n\n      if (errors) {\n        errors.forEach(err => dispatch(setAlert(err.msg)));\n      }\n\n      dispatch({\n        type: LOGIN_FAIL\n      });\n    }\n  };\n};\nexport const logout = () => dispatch => {\n  dispatch({\n    type: LOGOUT\n  });\n};","map":{"version":3,"sources":["C:/Users/iswar/etsy/Frontend/src/actions/auth.jsx"],"names":["axios","setAlert","REGISTER_SUCCESS","REGISTER_FAIL","USER_LOADED","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT","setAuthToken","loadUser","dispatch","localStorage","token","res","get","type","payload","data","err","register","uname","email","password","location","config","headers","body","JSON","stringify","post","alert","errors","response","console","log","forEach","msg","login","setItem","logout"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport { setAlert } from './alert';\r\nimport{\r\n    REGISTER_SUCCESS,\r\n    REGISTER_FAIL,\r\n    USER_LOADED,\r\n    AUTH_ERROR,\r\n    LOGIN_SUCCESS,\r\n    LOGIN_FAIL,\r\n    LOGOUT\r\n} from './types';\r\nimport setAuthToken from '../utils/setAuthToken';\r\n\r\nexport const loadUser = () =>async dispatch => {\r\n    if(localStorage.token){\r\n        setAuthToken(localStorage.token);\r\n    }\r\n    try {\r\n        const res = await axios.get('/api/auth');\r\n        dispatch({\r\n            type: USER_LOADED,\r\n            payload: res.data\r\n        });\r\n    } catch (err) {\r\n        dispatch({\r\n            type: AUTH_ERROR\r\n        })\r\n    }\r\n};\r\n\r\nexport const register = ({uname, email, password,location}) => async dispatch =>{\r\nconst config = {\r\n    headers: {\r\n        'Content-Type': 'application/json'\r\n    }\r\n}\r\nconst body = JSON.stringify({uname, email, password,location});\r\n\r\ntry{\r\n    const res = await axios.post('/api/users',body,config);\r\n    if(res.data==='failure'){\r\n        alert(\"user already existed\");\r\n    }\r\n    else{\r\n        alert(\"user added\")\r\n    }\r\n    dispatch({\r\n        type: REGISTER_SUCCESS,\r\n        payload: res.data\r\n    })\r\n}catch(err){\r\n    const errors = err.response.data.errors;\r\n    console.log(errors);\r\n    if(errors){\r\n        errors.forEach(err => dispatch(setAlert(err.msg)));\r\n    }\r\n    dispatch({\r\n        type: REGISTER_FAIL\r\n    })\r\n}\r\n}\r\n\r\nexport const login = ({ email, password}) => async dispatch =>{\r\n    const config = {\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        }\r\n    }\r\n    const body = JSON.stringify({ email, password});\r\n    localStorage.setItem('email', email);\r\n    try{\r\n        const res = await axios.post('/api/users/login',body,config);\r\n        if(res.data !== \"failure\"){\r\n            dispatch({\r\n                type: LOGIN_SUCCESS,\r\n                payload: res.data\r\n            });\r\n            //dispatch(loadUser());\r\n            \r\n         }\r\n         else{\r\n            dispatch({\r\n                type: LOGIN_FAIL\r\n            })\r\n            alert(\"Invalid credentials!\");\r\n         }\r\n        \r\n        \r\n    }catch(err){\r\n        const errors = err.response.data.errors;\r\n        console.log(errors);\r\n        if(errors){\r\n            errors.forEach(err => dispatch(setAlert(err.msg)));\r\n        }\r\n        dispatch({\r\n            type: LOGIN_FAIL\r\n        })\r\n    }\r\n    };\r\nexport const logout = () => dispatch => {\r\n    dispatch({type: LOGOUT});\r\n}"]},"metadata":{},"sourceType":"module"}